{"version":3,"sources":["main.ts"],"names":[],"mappings":"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","file":"main.c39d6dcf.js","sourceRoot":"..","sourcesContent":["import { Square } from \"./square\";\n\n// Elements\nconst $file: HTMLInputElement = document.getElementById('file') as HTMLInputElement;\nconst $canvas: HTMLCanvasElement = document.getElementById('canvas') as HTMLCanvasElement;\nconst $canvas2: HTMLCanvasElement = document.getElementById('canvas2') as HTMLCanvasElement;\n\nconst calibration = 440;\n\nconst notes = {\n  'C': semitons(calibration, -9),\n  'C#': semitons(calibration, -8),\n  'D': semitons(calibration, -7),\n  'D#': semitons(calibration, -6),\n  'E': semitons(calibration, -5),\n  'F': semitons(calibration, -4),\n  'F#': semitons(calibration, -3),\n  'G': semitons(calibration, -2),\n  'G#': semitons(calibration, -1),\n  'A': semitons(calibration, 0),\n  'A#': semitons(440, 1),\n  'B': semitons(440, 2),\n};\n\nconst ctx: CanvasRenderingContext2D = $canvas.getContext('2d');\nconst ctx2: CanvasRenderingContext2D = $canvas2.getContext('2d');\nconst colors = ['white', 'red', 'blue', 'green'];\nlet frequencyBytes: Uint8Array;\nlet audioCtx: AudioContext;\nlet analyser: AnalyserNode;\nlet audioSrc: AudioBufferSourceNode;\nlet osc: OscillatorNode;\n\n\n$canvas.width = screen.width;\n$canvas.height = 300;\n$canvas2.width = screen.width;\n$canvas2.height = 128;\n\nfunction semitons(hz, notes) {\n  const p = Math.pow(2, 1/12);\n  return hz * Math.pow(p, notes);\n}\n\n\nfunction readFile(file: File): Promise<ArrayBuffer> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.addEventListener('load', () => resolve(reader.result as ArrayBuffer));\n    reader.addEventListener('error', reject);\n\n    reader.readAsArrayBuffer(file);\n  });\n}\n\n$file.addEventListener('change', async () => {\n  const buffer = await readFile($file.files[0]);\n  initAudio(buffer);\n});\n\nasync function initAudio(buffer: ArrayBuffer) {\n  if (audioCtx) {\n    audioSrc.disconnect(analyser);\n    analyser.disconnect(audioCtx.destination);\n    audioSrc.stop();\n    audioCtx.close();\n  }\n\n  audioCtx = new AudioContext();\n  analyser = audioCtx.createAnalyser();\n  analyser.fftSize = 256;\n  audioSrc = audioCtx.createBufferSource();\n  audioSrc.buffer = await audioCtx.decodeAudioData(buffer);\n  frequencyBytes = new Uint8Array(analyser.frequencyBinCount);\n  audioSrc.connect(analyser).connect(audioCtx.destination);\n  // osc = audioCtx.createOscillator();\n  audioSrc.start();\n}\n\nfunction waveMap(buffer: AudioBuffer) {\n  ctx2.clearRect(0, 0, $canvas2.width, $canvas2.height);\n\n  if (buffer) {\n    const p = audioCtx.currentTime / buffer.duration;\n    const steps = $canvas2.width;\n    const maxH = $canvas2.height / buffer.numberOfChannels;\n\n    for (let i = 0; i < buffer.numberOfChannels; i++) {\n      const bytes = buffer.getChannelData(i);\n      const pv = p * $canvas2.width;\n\n      const width = $canvas2.width / steps;\n      for (let d = 0; d < bytes.length; d += steps) {\n        const x = (width * d) / steps;\n        const h = bytes[d] * maxH;\n        const y = ((maxH / 2) - (h / 2)) + maxH * i;\n\n        const color = x <= pv ? 'white' : 'rgba(255, 255, 255, 0.25)';\n\n        ctx2.fillStyle = color;\n        ctx2.fillRect(x, y, width, h);\n      }\n\n    }\n  }\n}\n\nconsole.log(semitons(440, 1));\n\nfunction loop() {\n  ctx.clearRect(0, 0, $canvas.width, $canvas.height);\n\n\n  if (frequencyBytes) {\n    analyser.getByteFrequencyData(frequencyBytes);\n\n    const bytes = frequencyBytes.slice(0, -45);\n    waveMap(audioSrc.buffer);\n\n    for (let i = 0; i < bytes.length; i++) {\n      const width = $canvas.width / bytes.length;\n      const x = width * i;\n      const intensity = bytes[i] / 256;\n      const h = intensity * ($canvas.height - 32);\n\n      const color = `rgb(${(1 - (i / bytes.length)) * 255}, ${(i / bytes.length) * 255}, 51)`;\n\n      ctx.fillStyle = color;\n      ctx.fillRect(x, ($canvas.height / 2) - h / 2, width, h);\n\n      // ctx.fillRect($canvas.width - 1, $canvas.height - x, width, 1);\n    }\n\n\n    // const data = ctx.getImageData(1, 0, $canvas.width - 1, $canvas.height);\n    // ctx.clearRect(0, 0, $canvas.width, $canvas.height);\n    // ctx.putImageData(data, 0, 0);\n\n  }\n\n\n  window.requestAnimationFrame(loop);\n}\n\nwindow.requestAnimationFrame(loop);\n"]}